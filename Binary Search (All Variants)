*********************************************************************************** Iterative Binary Search ****************************************************************************************
// 1. Iterative Binary Search
// TC: O(logn)
// SC: O(1)
// Link: https://leetcode.com/problems/binary-search/description/

class Solution {
    public int search(int[] nums, int target) {
        int lb=0, ub=nums.length-1, mid;

        while(lb <= ub){
            // If we add INT_MAX with INT_MAX to avoid int overflow case, maybe we could have used long here as well.
            mid = lb + (ub-lb)/2;

            if(nums[mid] == target)
                return mid;
            else if(nums[mid] > target)
                ub = mid - 1;
            else                              // if(nums[mid] < target)
                lb = mid + 1;
        }

        return -1;
    }
}

************************************************************************************* Recursive Binary Search ******************************************************************************************
// 2. Recursive Binary Search
// TC: O(logn)
// SC: O(logn) (Only for system stack not any auxiallary space required by the algorithm)
// Link: https://leetcode.com/problems/binary-search/description/

class Solution {
    public int binSearch(int[] nums, int target, int lb, int ub){
        if(lb > ub){
            return -1;
        }

        // If we add INT_MAX with INT_MAX to avoid int overflow case, maybe we could have used long here as well.
        int mid = lb + (ub-lb)/2;
        if(nums[mid] == target)
            return mid;
        else if(nums[mid] > target)
            return binSearch(nums, target, lb, mid-1);
        else
            return binSearch(nums, target, mid+1, ub);
    }

    public int search(int[] nums, int target) {
        return binSearch(nums, target, 0, nums.length-1);
    }
}

********************************************************************************** Practice Problems *********************************************************************************************************
********************************************************************************** Lower Bound Binary Search ****************************************************************************************
// 1. Lower Bound Binary Search
// Lower bound means:
// Smallest index such that arr[ind] >= target
// TC: O(logn)
// SC: O(1)

public class Main {
    public static int findLb(int[] arr, int target){
        int lb=0, ub=arr.length-1, mid;
        int index = arr.length;

        while(lb <= ub){
            mid = lb + (ub - lb) / 2;
            
            if(arr[mid] >= target){
                index = mid;
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }

        return index;       
    }
    
    public static void main(String[] args) {
        int[] arr = {1,2,3,5,6,8,12,22};
        System.out.println(findLb(arr, 20));
    }
}

************************************************************************************ Upper Bound Binary Search ************************************************************************************
// 2. Upper bound binary search
// Upper bound means:
// Smallest index such that arr[mid] > target
// TC: O(logn)
// SC: O(1)

public class Main {
    public static int findUb(int[] arr, int target){
        int lb=0, ub=arr.length-1, mid;
        int index = arr.length;

        while(lb <= ub){
            mid = lb + (ub - lb) / 2;
            
            if(arr[mid] > target){
                index = mid;
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }

        return index;       
    }
    
    public static void main(String[] args) {
        int[] arr = {1,2,3,5,6,8,12,22};
        System.out.println(findUb(arr, 7));
    }
}

*************************************************************************************** Floor and ceiling using Binary search *************************************************************************
// Problem Link: https://www.naukri.com/code360/problems/ceiling-in-a-sorted-array_1825401?leftPanelTabValue=PROBLEM
// TC: O(logn)
// SC: O(1)

import java.util.* ;
import java.io.*; 

public class Solution {
    public static int getFloor(int[] arr, int n, int target){
      int lb=0, ub=n-1, mid, floorVal=-1;

      while(lb <= ub){
        mid = lb + (ub-lb)/2;

        if(arr[mid] <= target){
          floorVal = arr[mid];
          lb = mid + 1;
        }else{
          ub = mid - 1;
        }
      }

      return floorVal;
    }

    public static int getCeiling(int[] arr, int n, int target){
      int lb=0, ub=n-1, mid, ceilingVal=-1;

      while(lb <= ub){
        mid = lb + (ub-lb)/2;

        if(arr[mid] >= target){
          ub = mid - 1;
          ceilingVal = arr[mid];
        }else{
          lb = mid + 1;
        }
      }

      return ceilingVal;
    }

    public static int[] getFloorAndCeil(int[] arr, int n, int x) {
       int[] res = new int[2];
       res[0] = getFloor(arr, n, x);
       res[1] = getCeiling(arr, n, x);

       return res;
    }
}

********************************************************** First & Last Occ. Using (lower & upper bound BS    ************************************************************
Problem Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
TC: (logn)
SC: O(1)

class Solution {
    // Get Lower Bound
    // Means smallest index such that, arr[index] >= target
    public int getFirstOcc(int[] arr, int target){
        int lb=0, ub=arr.length-1, mid, firstOccIndex=arr.length; // always keep at the end firstOccIndex

        while(lb <= ub){
            mid = lb + (ub-lb)/2;

            if(arr[mid] >= target){
                firstOccIndex = mid;
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }

        if(firstOccIndex == arr.length || arr[firstOccIndex] != target)
            return -1;
        else
            return firstOccIndex;
    }

    // Get Upper Bound
    // Means smallest index such that, arr[index] > target
    public int getLastOcc(int[] arr, int target){
        int lb=0, ub=arr.length-1, mid, lastOccIndex=arr.length; // always keep at the end lastOccIndex

        while(lb <= ub){
            mid = lb + (ub-lb)/2;

            if(arr[mid] > target){
                ub = mid - 1;
                lastOccIndex = mid;
            }else{
                lb = mid + 1;
            }
        }

        if(lastOccIndex == 0)
            return -1;

        if(lastOccIndex == arr.length && arr[lastOccIndex-1] != target)
            return -1;
        
        if(arr[lastOccIndex-1] != target)
            return -1;
        
        return lastOccIndex - 1;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[2];

        res[0] = getFirstOcc(nums, target);
        res[1] = getLastOcc(nums, target);

        return res;
    }
}

********************************************************** First & Last Occ. Using plane binary search ************************************************************
Problem Link: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
TC: (logn)
SC: O(1)

class Solution {
    // Binary search on left
    public int getFirstOcc(int[] arr, int target){
        int lb=0, ub=arr.length-1, mid, firstOccIndex=-1;

        while(lb <= ub){
            mid = lb + (ub-lb)/2;

            if(arr[mid] == target){
                firstOccIndex = mid;
                ub = mid - 1;
            }else if(arr[mid] > target){
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }

        return firstOccIndex;
    }

    // Binary search on right
    public int getLastOcc(int[] arr, int target){
        int lb=0, ub=arr.length-1, mid, lastOccIndex=-1;

        while(lb <= ub){
            mid = lb + (ub-lb)/2;

            if(arr[mid] == target){
                lastOccIndex = mid;
                lb = mid + 1;
            }else if(arr[mid] > target){
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }

        return lastOccIndex;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] res = new int[2];

        res[0] = getFirstOcc(nums, target);
        if(res[0] == -1){
            res[1] = -1;
            return res;
        }

        res[1] = getLastOcc(nums, target);

        return res;
    }
}

******************************************************* Number of occuerences of number (using lower & upper bound) ***********************************************
Problem Link: https://www.geeksforgeeks.org/problems/number-of-occurrence2259/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-occurrence
TC: (logn)
SC: O(1)

class Solution {
    public int getFirstOcc(int[] arr, int n, int target){
        int lb=0, ub=n-1, mid, lowerBound=n;
        
        while(lb <= ub){
            mid = lb + (ub-lb)/2;
            
            if(arr[mid] >= target){
                ub = mid - 1;
                lowerBound = mid;
            }else{
                lb = mid + 1;
            }
        }
        
        if(lowerBound == n || arr[lowerBound] != target)
            return -1;
        else
            return lowerBound;
    }
    
    public int getLastOcc(int[] arr, int n, int target){
        int lb=0, ub=n-1, mid, upperBound=n;
        
        while(lb <= ub){
            mid = lb + (ub-lb) / 2;
            
            if(arr[mid] > target){
                upperBound = mid;
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }
        
        if(upperBound == 0)
            return -1;
        
        if(upperBound == n && arr[upperBound-1] == target)
            return upperBound - 1;
        
        if(arr[upperBound-1] != target)
            return -1;

        return upperBound-1;
    }
    
    int count(int[] arr, int n, int x) {
        int start = getFirstOcc(arr, n, x);
        if(start == -1)
            return 0;
        
        int end = getLastOcc(arr, n, x);
        
        return end-start+1;
    }
}

*************************************************** Number of occuerences of number (using plane binary search) ************************************************
Problem Link: https://www.geeksforgeeks.org/problems/number-of-occurrence2259/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=number-of-occurrence
TC: (logn)
SC: O(1)

class Solution {
    public int getFirstOcc(int[] arr, int n, int target){
        int lb=0, ub=n-1, mid, firstInd=-1;
        
        while(lb <= ub){
            mid = lb + (ub-lb)/2;
            
            if(arr[mid] == target){
                ub = mid - 1;
                firstInd = mid;
            }else if(arr[mid] > target){
                ub = mid - 1;
            }else{
                lb = mid + 1;
            }
        }
        
        return firstInd;
    }
    
    public int getLastOcc(int[] arr, int n, int target){
        int lb=0, ub=n-1, mid, lastInd=-1;
        
        while(lb <= ub){
            mid = lb + (ub-lb)/2;
            
            if(arr[mid] == target){
                lb = mid + 1;
                lastInd = mid;
            }else if(arr[mid] > target){
                ub = mid - 1;
            }else{
                lb = mid  + 1;
            }
        }
        
        return lastInd;
    }
    
    int count(int[] arr, int n, int x) {
        int start = getFirstOcc(arr, n, x);
        if(start == -1)
            return 0;
        
        int end = getLastOcc(arr, n, x);
        
        return end-start+1;
    }
}
